// Generated by CoffeeScript 1.9.3
var Kami;

Kami = (function() {
  var board;

  board = [];

  function Kami() {
    this.board = [[1, 1, 1, 2, 2], [1, 1, 1, 2, 2], [1, 1, 1, 2, 2], [1, 1, 1, 2, 2]];
  }

  Kami.prototype.board2node = function(board) {
    var check, i, isLink, j, k, l, nIndex1, nIndex2, node, node1, node2, nodes, ref, ref1, ref2, ref3, ref4, ref5, res, v, x, xMax, y, yMax;
    nodes = [];
    xMax = board.length;
    yMax = board[0].length;
    check = function(x, y, v, board, nodeList) {
      var i, len, p, plusX, plusY, ref, ref1;
      if (board[x][y] !== v) {
        return [board, nodeList];
      }
      nodeList.push([x, y]);
      board[x][y] = null;
      ref = [[-1, 0], [1, 0], [0, -1], [0, 1]];
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        plusX = p[0], plusY = p[1];
        if (x + plusX < 0 || board.length <= x + plusX) {
          continue;
        }
        if (y + plusY < 0 || board[0].length <= y + plusY) {
          continue;
        }
        ref1 = check(x + plusX, y + plusY, v, board, nodeList), board = ref1[0], nodeList = ref1[1];
      }
      return [board, nodeList];
    };
    for (x = i = 0, ref = xMax; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
      for (y = j = 0, ref1 = yMax; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
        v = board[x][y];
        if (v === null) {
          continue;
        }
        ref2 = check(x, y, v, board, []), board = ref2[0], node = ref2[1];
        res = {
          value: v,
          node: node,
          link: []
        };
        nodes.push(res);
      }
    }
    isLink = (function(_this) {
      return function(node1, node2) {
        var k, l, len, len1, makeMap, map2, p, plusX, plusY, ref3, xy;
        makeMap = function(node) {
          var k, l, len, len1, map, xy;
          xMax = 0;
          yMax = 0;
          for (k = 0, len = node.length; k < len; k++) {
            xy = node[k];
            x = xy[0], y = xy[1];
            if (xMax < x) {
              xMax = x;
            }
            if (yMax < y) {
              yMax = y;
            }
          }
          map = _this.getEmptyBoard(xMax + 1, yMax + 1);
          for (l = 0, len1 = node.length; l < len1; l++) {
            xy = node[l];
            x = xy[0], y = xy[1];
            map[x][y] = true;
          }
          return map;
        };
        map2 = makeMap(node2);
        for (k = 0, len = node1.length; k < len; k++) {
          xy = node1[k];
          x = xy[0], y = xy[1];
          ref3 = [[-1, 0], [1, 0], [0, -1], [0, 1]];
          for (l = 0, len1 = ref3.length; l < len1; l++) {
            p = ref3[l];
            plusX = p[0], plusY = p[1];
            if (x + plusX < 0 || map2.length <= x + plusX) {
              continue;
            }
            if (y + plusY < 0 || map2[0].length <= y + plusY) {
              continue;
            }
            if (map2[x + plusX][y + plusY]) {
              return true;
            }
          }
        }
        return false;
      };
    })(this);
    for (nIndex1 = k = 0, ref3 = nodes.length; 0 <= ref3 ? k < ref3 : k > ref3; nIndex1 = 0 <= ref3 ? ++k : --k) {
      node1 = nodes[nIndex1].node;
      for (nIndex2 = l = ref4 = nIndex1 + 1, ref5 = nodes.length; ref4 <= ref5 ? l < ref5 : l > ref5; nIndex2 = ref4 <= ref5 ? ++l : --l) {
        node2 = nodes[nIndex2].node;
        if (isLink(node1, node2)) {
          nodes[nIndex1].link.push(nIndex2);
          nodes[nIndex2].link.push(nIndex1);
        }
      }
    }
    return nodes;
  };

  Kami.prototype.getEmptyBoard = function(xMax, yMax, value) {
    var i, j, ref, ref1, res, x, y;
    if (value == null) {
      value = false;
    }
    res = [];
    for (x = i = 0, ref = xMax; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
      res[x] = [];
      for (y = j = 0, ref1 = yMax; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
        res[x][y] = value;
      }
    }
    return res;
  };

  return Kami;

})();
