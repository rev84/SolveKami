// Generated by CoffeeScript 1.9.3
(function() {
  window.Kami = (function() {
    function Kami() {}

    Kami.solve = function(board, turnNum, pathes) {
      var boardTemp, color, colors, i, j, k, len, len1, len2, myColor, node, nodes, path, pathesTemp, ref, res, x, y;
      if (pathes == null) {
        pathes = [];
      }
      console.log('count:' + (++window.count));
      if (turnNum < 0) {
        return false;
      }
      if (this.isSolvedBoard(board)) {
        return pathes;
      }
      if (this.board2colors(board).length - 1 > turnNum) {
        return false;
      }
      colors = this.board2colors(board);
      nodes = this.board2node(board);
      nodes.sort(function() {
        return b.path.length - a.path.length;
      });
      for (i = 0, len = nodes.length; i < len; i++) {
        node = nodes[i];
        myColor = node.color;
        for (j = 0, len1 = colors.length; j < len1; j++) {
          color = colors[j];
          boardTemp = board.copy();
          pathesTemp = pathes.copy();
          if (myColor === color) {
            continue;
          }
          ref = node.path;
          for (k = 0, len2 = ref.length; k < len2; k++) {
            path = ref[k];
            x = path[0], y = path[1];
            boardTemp[x][y] = color;
          }
          pathesTemp.push([color, node.path[0]]);
          res = this.solve(boardTemp, turnNum - 1, pathesTemp);
          if (res !== false) {
            return res;
          }
        }
      }
      return false;
    };

    Kami.isSolvedBoard = function(board) {
      var colors;
      colors = this.board2colors(board);
      return colors.length === 1;
    };

    Kami.node2board = function(nodes) {
      var board, i, j, k, l, len, len1, len2, len3, n, node, nodeList, path, ref, ref1, ref2, x, xMax, y, yMax;
      nodeList = [];
      for (i = 0, len = nodes.length; i < len; i++) {
        n = nodes[i];
        ref = n.path;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          path = ref[j];
          nodeList.push(path);
        }
      }
      ref1 = this.getMaxInNode(nodeList), xMax = ref1[0], yMax = ref1[1];
      board = this.getEmptyBoard(xMax, yMax);
      for (k = 0, len2 = nodes.length; k < len2; k++) {
        node = nodes[k];
        ref2 = node.node;
        for (l = 0, len3 = ref2.length; l < len3; l++) {
          n = ref2[l];
          x = n[0], y = n[1];
          board[x][y] = node.color;
        }
      }
      return board;
    };

    Kami.board2colors = function(board) {
      var b, color, colors, i, j, len, len1;
      colors = [];
      for (i = 0, len = board.length; i < len; i++) {
        b = board[i];
        for (j = 0, len1 = b.length; j < len1; j++) {
          color = b[j];
          if (!colors.in_array(color)) {
            colors.push(color);
          }
        }
      }
      return colors;
    };

    Kami.board2node = function(board) {
      var _, boardCheck, i, j, k, l, nIndex1, nIndex2, nodes, pathes, pathes1, pathes2, ref, ref1, ref2, ref3, ref4, ref5, res, v, x, xMax, y, yMax;
      nodes = [];
      xMax = board.length;
      yMax = board[0].length;
      boardCheck = this.getEmptyBoard(xMax, yMax);
      for (x = i = 0, ref = xMax; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
        for (y = j = 0, ref1 = yMax; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
          v = board[x][y];
          if (boardCheck[x][y] === null) {
            continue;
          }
          ref2 = this.checkNode(x, y, v, board, boardCheck), _ = ref2[0], boardCheck = ref2[1], pathes = ref2[2];
          res = {
            color: v,
            path: pathes,
            link: []
          };
          nodes.push(res);
        }
      }
      for (nIndex1 = k = 0, ref3 = nodes.length; 0 <= ref3 ? k < ref3 : k > ref3; nIndex1 = 0 <= ref3 ? ++k : --k) {
        pathes1 = nodes[nIndex1].path;
        for (nIndex2 = l = ref4 = nIndex1 + 1, ref5 = nodes.length; ref4 <= ref5 ? l < ref5 : l > ref5; nIndex2 = ref4 <= ref5 ? ++l : --l) {
          pathes2 = nodes[nIndex2].path;
          if (this.isLink(pathes1, pathes2)) {
            nodes[nIndex1].link.push(nIndex2);
            nodes[nIndex2].link.push(nIndex1);
          }
        }
      }
      return nodes;
    };

    Kami.checkNode = function(x, y, v, board, boardCheck, pathes) {
      var i, len, p, plusX, plusY, ref, ref1;
      if (pathes == null) {
        pathes = [];
      }
      pathes.push([x, y]);
      boardCheck[x][y] = null;
      ref = [[-1, 0], [1, 0], [0, -1], [0, 1]];
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        plusX = p[0], plusY = p[1];
        if (x + plusX < 0 || board.length <= x + plusX) {
          continue;
        }
        if (y + plusY < 0 || board[0].length <= y + plusY) {
          continue;
        }
        if (board[x + plusX][y + plusY] !== v) {
          continue;
        }
        if (boardCheck[x + plusX][y + plusY] === null) {
          continue;
        }
        ref1 = this.checkNode(x + plusX, y + plusY, v, board, boardCheck, pathes), board = ref1[0], boardCheck = ref1[1], pathes = ref1[2];
      }
      return [board, boardCheck, pathes];
    };

    Kami.getMaxInPath = function(pathes) {
      var i, len, path, x, xMax, y, yMax;
      xMax = 0;
      yMax = 0;
      for (i = 0, len = pathes.length; i < len; i++) {
        path = pathes[i];
        x = path[0], y = path[1];
        if (xMax < x) {
          xMax = x;
        }
        if (yMax < y) {
          yMax = y;
        }
      }
      return [xMax + 1, yMax + 1];
    };

    Kami.makeMap = function(pathes) {
      var i, len, map, path, ref, x, xMax, y, yMax;
      ref = this.getMaxInPath(pathes), xMax = ref[0], yMax = ref[1];
      map = this.getEmptyBoard(xMax, yMax);
      for (i = 0, len = pathes.length; i < len; i++) {
        path = pathes[i];
        x = path[0], y = path[1];
        map[x][y] = true;
      }
      return map;
    };

    Kami.isLink = function(pathes1, pathes2) {
      var i, j, len, len1, map2, p, path1, plusX, plusY, ref, x, y;
      map2 = this.makeMap(pathes2);
      for (i = 0, len = pathes1.length; i < len; i++) {
        path1 = pathes1[i];
        x = path1[0], y = path1[1];
        ref = [[-1, 0], [1, 0], [0, -1], [0, 1]];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          p = ref[j];
          plusX = p[0], plusY = p[1];
          if (x + plusX < 0 || map2.length <= x + plusX) {
            continue;
          }
          if (y + plusY < 0 || map2[0].length <= y + plusY) {
            continue;
          }
          if (map2[x + plusX][y + plusY]) {
            return true;
          }
        }
      }
      return false;
    };

    Kami.getEmptyBoard = function(xMax, yMax, value) {
      var i, j, ref, ref1, res, x, y;
      if (value == null) {
        value = false;
      }
      res = [];
      for (x = i = 0, ref = xMax; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
        res[x] = [];
        for (y = j = 0, ref1 = yMax; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
          res[x][y] = value;
        }
      }
      return res;
    };

    Kami.printBoard = function(board) {
      var i, j, len, len1, res, x, y;
      res = '';
      for (i = 0, len = board.length; i < len; i++) {
        x = board[i];
        for (j = 0, len1 = x.length; j < len1; j++) {
          y = x[j];
          res += y;
        }
        res += "\n";
      }
      return console.log(res);
    };

    return Kami;

  })();

  Array.prototype.in_array = function(value) {
    var i, len, v;
    for (i = 0, len = this.length; i < len; i++) {
      v = this[i];
      if (v === value) {
        return true;
      }
    }
    return false;
  };

  Array.prototype.copy = function() {
    var i, j, len, len1, res, res2, v, v2;
    res = [];
    for (i = 0, len = this.length; i < len; i++) {
      v = this[i];
      res2 = [];
      for (j = 0, len1 = v.length; j < len1; j++) {
        v2 = v[j];
        res2.push(v2);
      }
      res.push(res2);
    }
    return res;
  };

}).call(this);
